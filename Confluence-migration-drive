
import requests
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.credentials import Credentials

def main(event, context):
    try:
        # Confluence API endpoint and authentication
        confluence_url = "CONFLUENCE_API_URL"
        confluence_headers = {"Authorization": "Bearer CONFLUENCE_TOKEN"}

        # Google Drive API setup
        drive_credentials = Credentials.from_authorized_user_info(GOOGLE_DRIVE_CREDS_JSON)
        drive_service = build("drive", "v3", credentials=drive_credentials)

        # Fetch files from Confluence
        confluence_response = requests.get(confluence_url, headers=confluence_headers)
        confluence_response.raise_for_status()  # Raise HTTPError for bad responses
        confluence_files = confluence_response.json()

        # Upload files to Google Drive
        for file_data in confluence_files:
            file_name = file_data["name"]
            file_url = file_data["url"]

            # Download the file from Confluence
            downloaded_file = requests.get(file_url)
            downloaded_file.raise_for_status()  # Raise HTTPError for download issues
            
            # Upload the file to Google Drive
            media = MediaFileUpload(file_name, mimetype='application/octet-stream')
            drive_file = drive_service.files().create(
                media_body=media,
                body={'name': file_name, 'parents': [GOOGLE_DRIVE_FOLDER_ID]}
            ).execute()
            print(f"Uploaded {file_name} to Google Drive")

    except Exception as e:
        print(f"An error occurred: {e}")

# This function will be called when Lambda is triggered
# AWS Lambda specific, event and context are provided by the Lambda environment











# code to upload file to google drive

from google.oauth2 import service_account
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.http import MediaFileUpload

# Set the path to your OAuth 2.0 credentials JSON file
CREDENTIALS_JSON_FILE = 'path/to/your/credentials.json'

# Define the scopes you need for Google Drive API
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def create_drive_service():
    flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_JSON_FILE, SCOPES)
    creds = flow.run_local_server(port=0)
    service = build('drive', 'v3', credentials=creds)
    return service

def upload_file(file_path, drive_folder_name):
    drive_service = create_drive_service()
    
    # Find the Drive folder by name
    folder_query = f"name='{drive_folder_name}' and mimeType='application/vnd.google-apps.folder'"
    results = drive_service.files().list(q=folder_query).execute()
    folders = results.get('files', [])
    
    if not folders:
        print(f"Folder '{drive_folder_name}' not found.")
        return
    
    folder_id = folders[0]['id']
    
    # Define the file metadata
    file_metadata = {
        'name': 'Your_File_Name.ext',  # Change to your desired file name
        'parents': [folder_id]          # ID of the Google Drive folder where you want to upload the file
    }
    
    # Upload the file
    media = MediaFileUpload(file_path, resumable=True)
    uploaded_file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    print(f'File ID: {uploaded_file.get("id")}')

if __name__ == '__main__':
    file_to_upload = 'path/to/your/file_to_upload.ext'  # Change to the path of your file
    folder_name = 'Your_Drive_Folder_Name'  # Change to the name of your Drive folder
    upload_file(file_to_upload, folder_name)


