
import requests
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.credentials import Credentials

def main(event, context):
    try:
        # Confluence API endpoint and authentication
        confluence_url = "CONFLUENCE_API_URL"
        confluence_headers = {"Authorization": "Bearer CONFLUENCE_TOKEN"}

        # Google Drive API setup
        drive_credentials = Credentials.from_authorized_user_info(GOOGLE_DRIVE_CREDS_JSON)
        drive_service = build("drive", "v3", credentials=drive_credentials)

        # Fetch files from Confluence
        confluence_response = requests.get(confluence_url, headers=confluence_headers)
        confluence_response.raise_for_status()  # Raise HTTPError for bad responses
        confluence_files = confluence_response.json()

        # Upload files to Google Drive
        for file_data in confluence_files:
            file_name = file_data["name"]
            file_url = file_data["url"]

            # Download the file from Confluence
            downloaded_file = requests.get(file_url)
            downloaded_file.raise_for_status()  # Raise HTTPError for download issues
            
            # Upload the file to Google Drive
            media = MediaFileUpload(file_name, mimetype='application/octet-stream')
            drive_file = drive_service.files().create(
                media_body=media,
                body={'name': file_name, 'parents': [GOOGLE_DRIVE_FOLDER_ID]}
            ).execute()
            print(f"Uploaded {file_name} to Google Drive")

    except Exception as e:
        print(f"An error occurred: {e}")

# This function will be called when Lambda is triggered
# AWS Lambda specific, event and context are provided by the Lambda environment











# code to upload file to google drive

from google.oauth2 import service_account
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.http import MediaFileUpload

# Set the path to your OAuth 2.0 credentials JSON file
CREDENTIALS_JSON_FILE = 'path/to/your/credentials.json'

# Define the scopes you need for Google Drive API
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def create_drive_service():
    flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_JSON_FILE, SCOPES)
    creds = flow.run_local_server(port=0)
    service = build('drive', 'v3', credentials=creds)
    return service

def upload_file(file_path, drive_folder_name):
    drive_service = create_drive_service()
    
    # Find the Drive folder by name
    folder_query = f"name='{drive_folder_name}' and mimeType='application/vnd.google-apps.folder'"
    results = drive_service.files().list(q=folder_query).execute()
    folders = results.get('files', [])
    
    if not folders:
        print(f"Folder '{drive_folder_name}' not found.")
        return
    
    folder_id = folders[0]['id']
    
    # Define the file metadata
    file_metadata = {
        'name': 'Your_File_Name.ext',  # Change to your desired file name
        'parents': [folder_id]          # ID of the Google Drive folder where you want to upload the file
    }
    
    # Upload the file
    media = MediaFileUpload(file_path, resumable=True)
    uploaded_file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    print(f'File ID: {uploaded_file.get("id")}')

if __name__ == '__main__':
    file_to_upload = 'path/to/your/file_to_upload.ext'  # Change to the path of your file
    folder_name = 'Your_Drive_Folder_Name'  # Change to the name of your Drive folder
    upload_file(file_to_upload, folder_name)





#convert doc to docx


import os
from docx import Document

def convert_doc_to_docx(doc_file):
    # Define the .docx file path
    docx_file = os.path.splitext(doc_file)[0] + ".docx"
    
    # Load the .doc file
    doc = Document(doc_file)
    
    # Save as .docx format
    doc.save(docx_file)
    return docx_file

if __name__ == "__main__":
    doc_file_path = "path/to/your/file.doc"  # Replace with the path to your .doc file
    docx_file_path = convert_doc_to_docx(doc_file_path)
    print(f"Converted to: {docx_file_path}")

#extract text from .doc

import pytextract

def extract_text_from_doc(doc_file):
    try:
        text = pytextract.process(doc_file)
        return text
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    doc_file_path = "path/to/your/file.doc"  # Replace with the path to your .doc file
    extracted_text = extract_text_from_doc(doc_file_path)
    print(extracted_text)



## convert .doc to .dox file



import os
from pydub import AudioSegment
from pydub.silence import split_on_silence
from pydub.playback import play
from pydub.playback import play
from googleapiclient.discovery import build
from google.oauth2 import service_account

# Replace with your own values
input_doc_file = 'input.doc'
output_docx_file = 'output.docx'
google_drive_folder_id = 'your_folder_id_here'

# Define a function to convert .doc to .docx using pydub
def convert_doc_to_docx(input_file, output_file):
    sound = AudioSegment.from_file(input_file)
    silence_ranges = split_on_silence(sound, silence_thresh=sound.dBFS - 14)
    final_sound = AudioSegment.silent(duration=0)
    for silence in silence_ranges:
        final_sound += silence
    final_sound.export(output_file, format="wav")
    play(final_sound)

# Convert .doc to .docx
convert_doc_to_docx(input_doc_file, output_docx_file)

# Authenticate and upload to Google Drive
credentials = service_account.Credentials.from_service_account_file(
    'your_credentials.json', scopes=['https://www.googleapis.com/auth/drive.file']
)

service = build('drive', 'v3', credentials=credentials)

file_metadata = {
    'name': os.path.basename(output_docx_file),
    'parents': [google_drive_folder_id]
}

media = MediaFileUpload(output_docx_file, mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document')

uploaded_file = service.files().create(
    body=file_metadata,
    media_body=media,
    fields='id'
).execute()

print(f'File uploaded to Google Drive with ID: {uploaded_file.get("id")}')

# Clean up the temporary .docx file
os.remove(output_docx_file)

#### doc to google docs


import os
from googleapiclient.discovery import build
from google.oauth2 import credentials
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# Define the scopes required
SCOPES = ['https://www.googleapis.com/auth/drive.file']

# Initialize the OAuth flow
flow = InstalledAppFlow.from_client_secrets_file(
    'client_secrets.json',
    SCOPES
)

# Run the OAuth flow to obtain credentials
credentials = flow.run_local_server(port=0)

# Create a Google Drive API client
drive_service = build('drive', 'v3', credentials=credentials)

# Specify the path to your .doc file
doc_file_path = 'path_to_your.doc'

# Upload the .doc file to Google Drive
file_metadata = {'name': 'My Converted Doc'}
media = MediaFileUpload(doc_file_path, mimetype='application/msword')
uploaded_file = drive_service.files().create(
    body=file_metadata,
    media_body=media,
    fields='id'
).execute()

# The uploaded file ID
file_id = uploaded_file.get('id')

# Check if it's successfully uploaded and converted
if file_id:
    print(f"File uploaded and converted. File ID: {file_id}")
else:
    print("Failed to upload and convert the file.")



#######

download file from confluence 

import requests

# Replace with your Confluence access token and the URL of the file you want to download
access_token = 'your_access_token'
confluence_file_url = 'https://your-confluence-url/path/to/your/file.html'

# Specify the path where you want to save the downloaded file
save_path = 'path/to/save/your_downloaded_file.html'

# Create headers with the access token
headers = {
    'Authorization': f'Bearer {access_token}',
}

# Send an HTTP GET request with the access token to download the file
response = requests.get(confluence_file_url, headers=headers)

# Check if the request was successful (HTTP status code 200)
if response.status_code == 200:
    # Open a local file and write the content from the response
    with open(save_path, 'wb') as file:
        file.write(response.content)
    print(f"File downloaded and saved to {save_path}")
else:
    print(f"Failed to download the file. Status code: {response.status_code}")


##########

import os
import requests
from google.oauth2 import credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Confluence API and token
CONFLUENCE_API_URL = "https://your-confluence-url/wiki/rest/api/content/"
CONFLUENCE_API_TOKEN = "your-confluence-api-token"

# Google Drive credentials (OAuth 2.0)
GOOGLE_DRIVE_TOKEN_FILE = 'your-google-drive-token.json'  # Path to your OAuth 2.0 token JSON file
SCOPES = ['https://www.googleapis.com/auth/drive']

# Load the OAuth 2.0 token for Google Drive
creds = None
if os.path.exists(GOOGLE_DRIVE_TOKEN_FILE):
    creds = credentials.Credentials.from_authorized_user_file(GOOGLE_DRIVE_TOKEN_FILE, SCOPES)

drive_service = build('drive', 'v3', credentials=creds)

def download_file_from_confluence(confluence_file_id):
    headers = {
        'Authorization': f'Bearer {CONFLUENCE_API_TOKEN}'
    }

    # Make a request to Confluence to get the file details
    url = f"{CONFLUENCE_API_URL}{confluence_file_id}/child/attachment"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        # Parse the response and download the file
        file_info = response.json()
        download_url = file_info['results'][0]['_links']['download']
        file_name = file_info['results'][0]['title']

        with open(file_name, 'wb') as file:
            response = requests.get(download_url, headers=headers)
            file.write(response.content)

        return file_name
    else:
        print("Failed to download file from Confluence")
        return None

def upload_file_to_google_drive(file_name):
    file_metadata = {
        'name': file_name,
    }
    media = MediaFileUpload(file_name, resumable=True)
    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    print(f'File {file_name} uploaded to Google Drive with ID: {file.get("id")}')

# Example usage
confluence_file_id = 'your-confluence-file-id'
downloaded_file_name = download_file_from_confluence(confluence_file_id)
if downloaded_file_name:
    upload_file_to_google_drive(downloaded_file_name)





